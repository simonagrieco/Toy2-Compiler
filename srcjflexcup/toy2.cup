import java_cup.runtime.*;
import nodi.*;
import java.util.ArrayList;


terminal String VAR, ENDVAR, COLON, ASSIGN, SEMI, ID, COMMA, REAL_CONST, INTEGER_CONST, STRING_CONST, TRUE, FALSE,
         REAL, INTEGER, STRING, BOOLEAN, RETURN, FUNCTION, TYPERETURN, ENDFUNCTION, LPAR, RPAR, PROCEDURE, ENDPROCEDURE,
         OUT, WRITE, WRITERETURN, DOLLARSIGN, READ, IF, THEN, ELSE, ENDIF, ELIF, WHILE, DO, ENDWHILE, PLUS, MINUS, TIMES, DIV,
         EQ, NE, LT, LE, GT, GE, AND, OR, NOT, REF;


terminal UMINUS, ASSOC;

nonterminal ExprOp Expr;
nonterminal ArrayList<ExprOp> Exprs;
nonterminal ArrayList<ExprOp> ProcExprs;
nonterminal ArrayList<ExprOp> IOConc;
nonterminal ArrayList<ExprOp> IOArgs;
nonterminal WhileOp WhileStat;
nonterminal BodyOp Else;
nonterminal ElifOp Elif;
nonterminal ArrayList<ElifOp> Elifs;
nonterminal IfStatOp IfStat;
nonterminal ProcCallOp ProcCall;
nonterminal FunCallOp FunCall;
nonterminal StatOp Stat;
nonterminal BodyOp Body;
nonterminal Identifier ProcParamId;
nonterminal ArrayList<ProcParamsOp> OtherProcParams;
nonterminal ArrayList<ProcParamsOp> ProcParams;
//nonterminal ProcNode Procedure;
nonterminal ArrayList<ProcNodeOp> Procedure;
nonterminal ArrayList<TypeOp> Types;
nonterminal ArrayList<FuncParamsOp> OtherFuncParams;
nonterminal ArrayList<FuncParamsOp> FuncParams;
//nonterminal FuncNode Function;
nonterminal ArrayList<FuncNodeOp> Function;
nonterminal TypeOp Type;
nonterminal ConstOp Const;
nonterminal ArrayList<ConstOp> Consts;
nonterminal ArrayList<Identifier> Ids;
nonterminal ArrayList<DeclOp> Decls;
nonterminal ArrayList<DeclOp> VarDecl;
//nonterminal ArrayList<Iter> Iter;
//nonterminal ArrayList<Iter> IterProc;
nonterminal ProgramOp Program;

nonterminal IterOp Iter;
nonterminal IterOp IterProc;

precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc EQ, NE, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left LPAR;
precedence left RPAR;
precedence left UMINUS;
precedence left ASSOC;
precedence left PROCEDURE;


Program ::= IterProc:iterproc Procedure:proc Iter:iter {:RESULT = new ProgramOp(iterproc, proc, iter);:};


IterProc ::= VarDecl:vardecl IterProc:iter {:
         RESULT= iter.addVars(vardecl);
         :}
      | Function:func IterProc:iter {:
        RESULT= iter.addFunction(func);
        :}
      | /* empty */ {:RESULT = new IterOp(new ArrayList<DeclOp>(), new ArrayList<FuncNodeOp>());:};

Iter ::= VarDecl:vardecl Iter:iter {:
      RESULT= iter.addVars(vardecl);
     :}
      | Function:func Iter:iter {:
      RESULT= iter.addFunction(func);
      :}
      | Procedure:proc Iter:iter {:
      RESULT= iter.addProcedure(proc);
      :}
      | /* empty */ {:RESULT = new IterOp(new ArrayList<DeclOp>(), new ArrayList<FuncNodeOp>(), new ArrayList<ProcNodeOp>());:};


VarDecl ::= VAR Decls:decls {:RESULT = decls;:};

Decls ::= Ids:ids COLON Type:type SEMI Decls:decls {:
          RESULT = new ArrayList<DeclOp>();
          RESULT.add(new DeclOp(ids, type));
          RESULT.addAll(decls);
          :}
	| Ids:ids ASSIGN Consts:consts SEMI Decls:decls {:
          RESULT = new ArrayList<DeclOp>();
          RESULT.add(new DeclOp(ids, consts));
          RESULT.addAll(decls);
          :}
	| Ids:ids COLON Type:type SEMI ENDVAR {:
	      RESULT = new ArrayList<DeclOp>();
          RESULT.add(new DeclOp(ids, type));
          :}
	| Ids:ids ASSIGN Consts:consts SEMI ENDVAR {:
	      RESULT = new ArrayList<DeclOp>();
          RESULT.add(new DeclOp(ids, consts));
          :};


Ids ::= ID:id COMMA Ids:ids {:
        RESULT= new ArrayList<Identifier>();
        RESULT.add(new Identifier(id));
        RESULT.addAll(ids);
        :}
    | ID:id {:
        RESULT= new ArrayList<Identifier>();
        RESULT.add(new Identifier(id));
        :};

Consts ::= Const:constant COMMA Consts:consts {:
        RESULT= new ArrayList<ConstOp>();
        RESULT.add(constant);
        RESULT.addAll(consts);
        :}
	| Const:constant {:
    RESULT= new ArrayList<ConstOp>();
    RESULT.add(constant);
    :};

Const ::= TRUE:lessema {:RESULT = new ConstOp("boolean_const","true");:}
      | FALSE:lessema {:RESULT = new ConstOp("boolean_const","false");:}
      | REAL_CONST:lessema {:RESULT = new ConstOp("real_const", lessema);:}
	  | INTEGER_CONST:lessema {:RESULT = new ConstOp("integer_const", lessema);:}
	  | STRING_CONST:lessema {:RESULT = new ConstOp("string_const", lessema);:};


Function  ::= FUNCTION ID:id LPAR FuncParams:funcpar RPAR TYPERETURN Types:types COLON Body:body ENDFUNCTION {:
          RESULT = new ArrayList<FuncNodeOp>();
          RESULT.add(new FuncNodeOp(new Identifier(id), funcpar, types, body));
          :};

FuncParams ::= ID:id COLON Type:type OtherFuncParams:otherfunc {:
           RESULT = new ArrayList<FuncParamsOp>();
           RESULT.add(new FuncParamsOp(new Identifier(id), type));
           RESULT.addAll(otherfunc);
           :}
	    | /* empty */ {:RESULT = new ArrayList<FuncParamsOp>();:};

OtherFuncParams ::= COMMA ID:id COLON Type:type OtherFuncParams:otherfunc {:
                RESULT = new ArrayList<FuncParamsOp>();
                RESULT.add(new FuncParamsOp(new Identifier(id), type));
                RESULT.addAll(otherfunc);
                :}
	    | /* empty */ {:RESULT = new ArrayList<FuncParamsOp>();:};


Type ::= REAL {:RESULT = new TypeOp("real");:}
	| INTEGER {:RESULT = new TypeOp("integer");:}
	| STRING {:RESULT = new TypeOp("string");:}
	| BOOLEAN {:RESULT = new TypeOp("boolean");:};

Types ::= Type:type COMMA Types:types {:
      RESULT= new ArrayList<TypeOp>();
      RESULT.add(type);
      RESULT.addAll(types);
      :}
	  | Type:type {:
      RESULT= new ArrayList<TypeOp>();
      RESULT.add(type);
	  :};

Procedure ::= PROCEDURE ID:id LPAR ProcParams:procpar RPAR COLON Body:body ENDPROCEDURE
        {:RESULT = new ArrayList<ProcNodeOp>();
        RESULT.add(new ProcNodeOp(new Identifier(id), procpar, body));
        :};

ProcParams::= ProcParamId:procParamId COLON Type:type OtherProcParams:otherproc {:
          RESULT = new ArrayList<ProcParamsOp>();
          RESULT.add(new ProcParamsOp(procParamId, type));
          RESULT.addAll(otherproc);
          :}
	   | /* empty */ {:RESULT = new ArrayList<ProcParamsOp>();:};

OtherProcParams ::= COMMA ProcParamId:procParamId COLON Type:type OtherProcParams:otherproc {:
                RESULT = new ArrayList<ProcParamsOp>();
                RESULT.add(new ProcParamsOp(procParamId, type));
                RESULT.addAll(otherproc);
                :}
	   | /* empty */ {:RESULT = new ArrayList<ProcParamsOp>();:};

ProcParamId ::= ID:id {:RESULT = new Identifier("id", id);:}
	   | OUT ID:id {:RESULT = new Identifier("out",id);
	                 RESULT.setOut(true);
	                 :};

Body ::= VarDecl:vardecl Body:body {:
     RESULT = body.addVars(vardecl);
     :}
     | Stat:stat Body:body {:
      RESULT = body.addStat(stat);
      :}
     | /* empty */  {:RESULT = new BodyOp(new ArrayList<DeclOp>(), new ArrayList<StatOp>());:};


Stat ::= Ids:ids ASSIGN Exprs:exprs SEMI {: RESULT = new StatOp("assign", ids, exprs); :}
	 | ProcCall:proccall SEMI {:RESULT = proccall;:}
	 | RETURN Exprs:exprs SEMI {:RESULT = new StatOp("return", exprs);:}
	 | WRITE IOArgs:ioargs SEMI  {:RESULT = new StatOp("write", ioargs);:}
	 | WRITERETURN IOArgs:ioargs SEMI {:RESULT = new StatOp("writereturn", ioargs);:}
	 | READ IOArgs:ioargs SEMI {:RESULT = new StatOp("read", ioargs);:}
	 | IfStat:ifstat SEMI {:RESULT = ifstat;:}
	 | WhileStat:whilestat SEMI {:RESULT = whilestat;:};

FunCall ::= ID:id LPAR Exprs:exprs RPAR {:RESULT = new FunCallOp(new Identifier(id), exprs);:}
         | ID:id LPAR RPAR {:RESULT = new FunCallOp(new Identifier(id));:};

ProcCall ::= ID:id LPAR ProcExprs:procexprs RPAR {: RESULT = new ProcCallOp(new Identifier(id), procexprs);:}
         | ID:id LPAR RPAR {:RESULT = new ProcCallOp(new Identifier(id));:};


IfStat ::= IF Expr:expr THEN Body:body Elifs:elifsbody Else:elsebody ENDIF {: if (elifsbody != null && elsebody != null)
                                                                                    RESULT = new IfStatOp(expr, body, elifsbody, elsebody);
                                                                             else if(elifsbody != null && elsebody == null)
                                                                                    RESULT = new IfStatOp(expr, body, elifsbody);
                                                                             else if (elifsbody == null && elsebody != null)
                                                                                    RESULT = new IfStatOp(expr, body, elsebody);
                                                                             else
                                                                                    RESULT = new IfStatOp(expr, body);
                                                                             :};

Elifs ::= Elif:elif Elifs:elifs {:
      RESULT= new ArrayList<ElifOp>();
      RESULT.add(elif);
      RESULT.addAll(elifs);
      :}
      | /* empty */ {:RESULT = new ArrayList<ElifOp>();:};


Elif ::= ELIF Expr:expr THEN Body:body {:RESULT = new ElifOp(expr, body);:};

Else ::= ELSE Body:body {:RESULT = body;:}
     |  /* empty */ {:RESULT = null;:};

WhileStat ::= WHILE Expr:expr DO Body:body ENDWHILE {:RESULT = new WhileOp(expr,body);:};

IOArgs ::= IOConc:ioconc IOArgs:ioargs {:
       RESULT = new ArrayList<ExprOp>();
       RESULT.addAll(ioconc);
       RESULT.addAll(ioargs);
       :}
       |  DOLLARSIGN LPAR Expr:expr RPAR IOArgs:ioargs {:
       RESULT = new ArrayList<ExprOp>();
       RESULT.add(expr);
       RESULT.addAll(ioargs);
       :}
       | /* empty */ {:RESULT= new ArrayList<ExprOp>();:};


IOConc ::= IOConc:ioconc1 PLUS IOConc:ioconc2 {:
       RESULT=ioconc1;
       RESULT.addAll(ioconc2);
       :}
       | STRING_CONST:lessema {:
       RESULT = new ArrayList<ExprOp>();
       RESULT.add(new ConstOp("string_const", lessema));
       :};

ProcExprs::= Expr:expr COMMA ProcExprs:procexprs {:
         RESULT= new ArrayList<ExprOp>();
         RESULT.add(expr);
         RESULT.addAll(procexprs);
         :}
	  | REF ID:id COMMA ProcExprs:procexprs {:
      RESULT= new ArrayList<ExprOp>();
      RESULT.add(new Identifier("ref", id));
      RESULT.addAll(procexprs);
      :}
      | Expr:expr {:
      RESULT= new ArrayList<ExprOp>();
      RESULT.add(expr);
      :}
	  | REF ID:id {:
	  RESULT = new ArrayList<ExprOp>();
      RESULT.add(new Identifier("ref", id));
      :};

Exprs ::= Expr:expr COMMA Exprs:exprs {:
      RESULT= new ArrayList<ExprOp>();
      RESULT.add(expr);
      RESULT.addAll(exprs);
      :}
      | Expr:expr {:
       RESULT= new ArrayList<ExprOp>();
       RESULT.add(expr);
       :};

Expr ::=  FunCall:funcall {:RESULT = funcall;:}
            | REAL_CONST:lessema {:RESULT= new ConstOp("real_const",lessema);:}
            | INTEGER_CONST:lessema {:RESULT= new ConstOp("integer_const", lessema);:}
         	| STRING_CONST:lessema {:RESULT= new ConstOp("string_const", lessema);:}
         	| ID:lessema {:RESULT= new Identifier(lessema);:}
            | TRUE:lessema {:RESULT=new ConstOp("boolean_const", "true");:}
            | FALSE:lessema {:RESULT=new ConstOp("boolean_const", "false");:}
            | Expr:expr1  PLUS Expr:expr2 {:RESULT= new ExprOp("PlusOp", expr1, expr2);:} //addizione
         	| Expr:expr1  MINUS Expr:expr2 {:RESULT= new ExprOp("MinusOp", expr1, expr2);:} //sottrazione
         	| Expr:expr1  TIMES Expr:expr2 {:RESULT= new ExprOp("TimesOp", expr1, expr2);:} //moltiplicazione
         	| Expr:expr1  DIV Expr:expr2 {:RESULT= new ExprOp("DivOp", expr1, expr2);:}//divisione
         	| Expr:expr1  AND Expr:expr2 {:RESULT= new ExprOp("AndOp", expr1, expr2);:} //and tra due espressioni &&
         	| Expr:expr1  OR Expr:expr2 {:RESULT= new ExprOp("OrOp", expr1, expr2);:}  //or tra due espressioni ||
         	| Expr:expr1  GT Expr:expr2 {:RESULT= new ExprOp("GTOp", expr1, expr2);:} //solo maggiore >
         	| Expr:expr1  GE Expr:expr2 {:RESULT= new ExprOp("GEOp", expr1, expr2);:} //maggiore uguale >=
         	| Expr:expr1  LT Expr:expr2 {:RESULT= new ExprOp("LTOp", expr1, expr2);:} //solo minore<
         	| Expr:expr1  LE Expr:expr2 {:RESULT= new ExprOp("LEOp", expr1, expr2);:} //minore uguale <=
         	| Expr:expr1  EQ Expr:expr2 {:RESULT= new ExprOp("EQOp", expr1, expr2);:}  //uguaglianza tra due espressioni =
         	| Expr:expr1  NE Expr:expr2 {:RESULT= new ExprOp("NEOp", expr1, expr2);:}  // divesi tra due espressioni <>
         	| MINUS Expr:expr1 {:RESULT= new UnaryOp("UminusOp",expr1);:} // meno davanti ad un espressione
         	%prec UMINUS
         	| NOT Expr: expr1 {:RESULT= new UnaryOp("NotOp",expr1);:} // not di un espressione !
            | LPAR Expr:expr1 RPAR {:RESULT=expr1;:}
             %prec ASSOC;

