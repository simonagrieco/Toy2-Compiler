
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import nodi.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\036\005\000\002\002\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\002\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\002\000" +
    "\002\035\004\000\002\034\007\000\002\034\007\000\002" +
    "\034\007\000\002\034\007\000\002\033\005\000\002\033" +
    "\003\000\002\032\005\000\002\032\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\027\014\000\002\026\006\000\002" +
    "\026\002\000\002\025\007\000\002\025\002\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\024\005\000\002\024\003\000\002\023\012\000" +
    "\002\022\006\000\002\022\002\000\002\021\007\000\002" +
    "\021\002\000\002\020\003\000\002\020\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\002\000\002\016\006" +
    "\000\002\016\004\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\004\000\002\015\006\000\002\015\005\000\002\014" +
    "\006\000\002\014\005\000\002\013\011\000\002\012\004" +
    "\000\002\012\002\000\002\011\006\000\002\010\004\000" +
    "\002\010\002\000\002\007\007\000\002\006\004\000\002" +
    "\006\007\000\002\006\002\000\002\005\005\000\002\005" +
    "\003\000\002\004\005\000\002\004\006\000\002\004\003" +
    "\000\002\004\004\000\002\003\005\000\002\003\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\010\004\004\025\011\032\ufffd\001\002\000" +
    "\004\011\160\001\002\000\004\002\265\001\002\000\010" +
    "\004\004\025\011\032\ufffd\001\002\000\004\032\230\001" +
    "\002\000\010\004\004\025\011\032\ufffd\001\002\000\004" +
    "\011\012\001\002\000\004\030\013\001\002\000\006\011" +
    "\014\031\uffe8\001\002\000\004\006\217\001\002\000\004" +
    "\031\016\001\002\000\004\026\017\001\002\000\012\020" +
    "\023\021\020\022\022\023\024\001\002\000\012\006\uffe4" +
    "\010\uffe4\012\uffe4\031\uffe4\001\002\000\006\006\uffe0\012" +
    "\215\001\002\000\012\006\uffe3\010\uffe3\012\uffe3\031\uffe3" +
    "\001\002\000\012\006\uffe5\010\uffe5\012\uffe5\031\uffe5\001" +
    "\002\000\012\006\uffe2\010\uffe2\012\uffe2\031\uffe2\001\002" +
    "\000\004\006\026\001\002\000\024\004\004\011\037\024" +
    "\044\027\uffd6\035\040\036\041\040\027\041\036\046\031" +
    "\001\002\000\010\010\uffc0\015\126\037\127\001\002\000" +
    "\004\007\210\001\002\000\024\011\057\013\046\014\056" +
    "\015\051\016\050\017\054\030\052\052\045\065\060\001" +
    "\002\000\004\010\203\001\002\000\004\010\202\001\002" +
    "\000\004\010\201\001\002\000\036\004\004\011\037\024" +
    "\044\027\uffd6\033\uffd6\035\040\036\041\040\027\041\036" +
    "\043\uffd6\044\uffd6\045\uffd6\046\031\050\uffd6\001\002\000" +
    "\024\011\057\013\046\014\056\015\051\016\050\017\054" +
    "\030\052\052\045\065\060\001\002\000\010\007\ufff2\012" +
    "\144\030\145\001\002\000\010\010\uffc0\015\126\037\127" +
    "\001\002\000\010\010\uffc0\015\126\037\127\001\002\000" +
    "\036\004\004\011\037\024\044\027\uffd6\033\uffd6\035\040" +
    "\036\041\040\027\041\036\043\uffd6\044\uffd6\045\uffd6\046" +
    "\031\050\uffd6\001\002\000\004\027\124\001\002\000\024" +
    "\011\057\013\046\014\056\015\051\016\050\017\054\030" +
    "\052\052\045\065\060\001\002\000\024\011\057\013\046" +
    "\014\056\015\051\016\050\017\054\030\052\052\045\065" +
    "\060\001\002\000\044\010\uffb6\012\uffb6\031\uffb6\042\uffb6" +
    "\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\001\002\000\040\010\uffb8\012\121\031\uffb8\051\065\052" +
    "\062\053\072\054\070\055\066\056\073\057\074\060\067" +
    "\061\071\062\064\063\063\064\075\001\002\000\044\010" +
    "\uffb2\012\uffb2\031\uffb2\042\uffb2\047\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\063\uffb2\064\uffb2\001\002\000\044\010\uffb4" +
    "\012\uffb4\031\uffb4\042\uffb4\047\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\001\002\000\024\011\057\013" +
    "\046\014\056\015\051\016\050\017\054\030\052\052\045" +
    "\065\060\001\002\000\004\010\116\001\002\000\044\010" +
    "\uffb1\012\uffb1\031\uffb1\042\uffb1\047\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000\044\010\uffb7" +
    "\012\uffb7\031\uffb7\042\uffb7\047\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\001\002\000\044\010\uffb5\012" +
    "\uffb5\031\uffb5\042\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\001\002\000\046\010\uffb3\012\uffb3" +
    "\030\112\031\uffb3\042\uffb3\047\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\001\002\000\024\011\057\013" +
    "\046\014\056\015\051\016\050\017\054\030\052\052\045" +
    "\065\060\001\002\000\044\010\uffa3\012\uffa3\031\uffa3\042" +
    "\uffa3\047\uffa3\051\065\052\062\053\072\054\070\055\066" +
    "\056\073\057\074\060\067\061\071\062\064\063\uffa3\064" +
    "\uffa3\001\002\000\024\011\057\013\046\014\056\015\051" +
    "\016\050\017\054\030\052\052\045\065\060\001\002\000" +
    "\024\011\057\013\046\014\056\015\051\016\050\017\054" +
    "\030\052\052\045\065\060\001\002\000\024\011\057\013" +
    "\046\014\056\015\051\016\050\017\054\030\052\052\045" +
    "\065\060\001\002\000\024\011\057\013\046\014\056\015" +
    "\051\016\050\017\054\030\052\052\045\065\060\001\002" +
    "\000\024\011\057\013\046\014\056\015\051\016\050\017" +
    "\054\030\052\052\045\065\060\001\002\000\024\011\057" +
    "\013\046\014\056\015\051\016\050\017\054\030\052\052" +
    "\045\065\060\001\002\000\024\011\057\013\046\014\056" +
    "\015\051\016\050\017\054\030\052\052\045\065\060\001" +
    "\002\000\024\011\057\013\046\014\056\015\051\016\050" +
    "\017\054\030\052\052\045\065\060\001\002\000\024\011" +
    "\057\013\046\014\056\015\051\016\050\017\054\030\052" +
    "\052\045\065\060\001\002\000\024\011\057\013\046\014" +
    "\056\015\051\016\050\017\054\030\052\052\045\065\060" +
    "\001\002\000\024\011\057\013\046\014\056\015\051\016" +
    "\050\017\054\030\052\052\045\065\060\001\002\000\024" +
    "\011\057\013\046\014\056\015\051\016\050\017\054\030" +
    "\052\052\045\065\060\001\002\000\044\010\uffab\012\uffab" +
    "\031\uffab\042\uffab\047\uffab\051\065\052\062\053\072\054" +
    "\070\055\066\056\073\057\074\060\067\061\071\062\064" +
    "\063\063\064\uffab\001\002\000\030\010\uffa8\012\uffa8\031" +
    "\uffa8\042\uffa8\047\uffa8\051\065\052\062\053\072\054\070" +
    "\063\uffa8\064\uffa8\001\002\000\030\010\uffa5\012\uffa5\031" +
    "\uffa5\042\uffa5\047\uffa5\051\065\052\062\053\072\054\070" +
    "\063\uffa5\064\uffa5\001\002\000\044\010\uffae\012\uffae\031" +
    "\uffae\042\uffae\047\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063" +
    "\uffae\064\uffae\001\002\000\030\010\uffaa\012\uffaa\031\uffaa" +
    "\042\uffaa\047\uffaa\051\065\052\062\053\072\054\070\063" +
    "\uffaa\064\uffaa\001\002\000\044\010\uffad\012\uffad\031\uffad" +
    "\042\uffad\047\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\001\002\000\030\010\uffa7\012\uffa7\031\uffa7\042" +
    "\uffa7\047\uffa7\051\065\052\062\053\072\054\070\063\uffa7" +
    "\064\uffa7\001\002\000\030\010\uffa6\012\uffa6\031\uffa6\042" +
    "\uffa6\047\uffa6\051\065\052\062\053\072\054\070\063\uffa6" +
    "\064\uffa6\001\002\000\044\010\uffb0\012\uffb0\031\uffb0\042" +
    "\uffb0\047\uffb0\051\uffb0\052\uffb0\053\072\054\070\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\001\002\000\030\010\uffa9\012\uffa9\031\uffa9\042\uffa9" +
    "\047\uffa9\051\065\052\062\053\072\054\070\063\uffa9\064" +
    "\uffa9\001\002\000\044\010\uffac\012\uffac\031\uffac\042\uffac" +
    "\047\uffac\051\065\052\062\053\072\054\070\055\066\056" +
    "\073\057\074\060\067\061\071\062\064\063\uffac\064\uffac" +
    "\001\002\000\044\010\uffaf\012\uffaf\031\uffaf\042\uffaf\047" +
    "\uffaf\051\uffaf\052\uffaf\053\072\054\070\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\001" +
    "\002\000\026\011\057\013\046\014\056\015\051\016\050" +
    "\017\054\030\052\031\114\052\045\065\060\001\002\000" +
    "\004\031\115\001\002\000\044\010\uffcc\012\uffcc\031\uffcc" +
    "\042\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\001\002\000\044\010\uffcd\012\uffcd\031\uffcd\042" +
    "\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\001\002\000\036\004\uffd3\011\uffd3\024\uffd3\027\uffd3" +
    "\033\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\050\uffd3\001\002\000\034\031\120" +
    "\051\065\052\062\053\072\054\070\055\066\056\073\057" +
    "\074\060\067\061\071\062\064\063\063\064\075\001\002" +
    "\000\044\010\uffa2\012\uffa2\031\uffa2\042\uffa2\047\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\001\002\000" +
    "\024\011\057\013\046\014\056\015\051\016\050\017\054" +
    "\030\052\052\045\065\060\001\002\000\006\010\uffb9\031" +
    "\uffb9\001\002\000\044\010\uffa4\012\uffa4\031\uffa4\042\uffa4" +
    "\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\001\002\000\012\002\uffea\004\uffea\025\uffea\032\uffea\001" +
    "\002\000\016\027\uffd7\033\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\050\uffd7\001\002\000\012\010\uffbe\015\uffbe\037\uffbe\051" +
    "\uffbe\001\002\000\004\030\136\001\002\000\004\010\135" +
    "\001\002\000\012\010\uffc0\015\126\037\127\051\132\001" +
    "\002\000\004\015\126\001\002\000\004\010\uffc2\001\002" +
    "\000\012\010\uffbf\015\uffbf\037\uffbf\051\uffbf\001\002\000" +
    "\036\004\uffd1\011\uffd1\024\uffd1\027\uffd1\033\uffd1\035\uffd1" +
    "\036\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\050\uffd1\001\002\000\024\011\057\013\046\014\056" +
    "\015\051\016\050\017\054\030\052\052\045\065\060\001" +
    "\002\000\034\031\140\051\065\052\062\053\072\054\070" +
    "\055\066\056\073\057\074\060\067\061\071\062\064\063" +
    "\063\064\075\001\002\000\010\010\uffc0\015\126\037\127" +
    "\001\002\000\004\010\uffc1\001\002\000\004\010\143\001" +
    "\002\000\036\004\uffd2\011\uffd2\024\uffd2\027\uffd2\033\uffd2" +
    "\035\uffd2\036\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\050\uffd2\001\002\000\004\011\160\001\002" +
    "\000\030\011\057\013\046\014\056\015\051\016\050\017" +
    "\054\030\052\031\151\052\045\065\060\066\150\001\002" +
    "\000\004\031\157\001\002\000\036\012\155\031\uffbb\051" +
    "\065\052\062\053\072\054\070\055\066\056\073\057\074" +
    "\060\067\061\071\062\064\063\063\064\075\001\002\000" +
    "\004\011\152\001\002\000\004\010\uffca\001\002\000\006" +
    "\012\153\031\uffba\001\002\000\026\011\057\013\046\014" +
    "\056\015\051\016\050\017\054\030\052\052\045\065\060" +
    "\066\150\001\002\000\004\031\uffbc\001\002\000\026\011" +
    "\057\013\046\014\056\015\051\016\050\017\054\030\052" +
    "\052\045\065\060\066\150\001\002\000\004\031\uffbd\001" +
    "\002\000\004\010\uffcb\001\002\000\010\006\ufff2\007\ufff2" +
    "\012\144\001\002\000\006\006\ufff3\007\ufff3\001\002\000" +
    "\034\042\163\051\065\052\062\053\072\054\070\055\066" +
    "\056\073\057\074\060\067\061\071\062\064\063\063\064" +
    "\075\001\002\000\030\004\004\011\037\024\044\035\040" +
    "\036\041\040\027\041\036\043\uffd6\044\uffd6\045\uffd6\046" +
    "\031\001\002\000\010\043\uffc7\044\uffc7\045\166\001\002" +
    "\000\006\043\174\044\uffc4\001\002\000\024\011\057\013" +
    "\046\014\056\015\051\016\050\017\054\030\052\052\045" +
    "\065\060\001\002\000\010\043\uffc7\044\uffc7\045\166\001" +
    "\002\000\006\043\uffc8\044\uffc8\001\002\000\034\042\172" +
    "\051\065\052\062\053\072\054\070\055\066\056\073\057" +
    "\074\060\067\061\071\062\064\063\063\064\075\001\002" +
    "\000\030\004\004\011\037\024\044\035\040\036\041\040" +
    "\027\041\036\043\uffd6\044\uffd6\045\uffd6\046\031\001\002" +
    "\000\010\043\uffc6\044\uffc6\045\uffc6\001\002\000\024\004" +
    "\004\011\037\024\044\035\040\036\041\040\027\041\036" +
    "\044\uffd6\046\031\001\002\000\004\044\176\001\002\000" +
    "\004\010\uffc9\001\002\000\004\044\uffc5\001\002\000\016" +
    "\027\uffd8\033\uffd8\043\uffd8\044\uffd8\045\uffd8\050\uffd8\001" +
    "\002\000\036\004\uffcf\011\uffcf\024\uffcf\027\uffcf\033\uffcf" +
    "\035\uffcf\036\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\050\uffcf\001\002\000\036\004\uffd4\011\uffd4" +
    "\024\uffd4\027\uffd4\033\uffd4\035\uffd4\036\uffd4\040\uffd4\041" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\001\002" +
    "\000\036\004\uffce\011\uffce\024\uffce\027\uffce\033\uffce\035" +
    "\uffce\036\uffce\040\uffce\041\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\050\uffce\001\002\000\034\047\205\051\065\052" +
    "\062\053\072\054\070\055\066\056\073\057\074\060\067" +
    "\061\071\062\064\063\063\064\075\001\002\000\024\004" +
    "\004\011\037\024\044\035\040\036\041\040\027\041\036" +
    "\046\031\050\uffd6\001\002\000\004\050\207\001\002\000" +
    "\004\010\uffc3\001\002\000\024\011\057\013\046\014\056" +
    "\015\051\016\050\017\054\030\052\052\045\065\060\001" +
    "\002\000\004\010\212\001\002\000\036\004\uffd5\011\uffd5" +
    "\024\uffd5\027\uffd5\033\uffd5\035\uffd5\036\uffd5\040\uffd5\041" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050\uffd5\001\002" +
    "\000\004\010\214\001\002\000\036\004\uffd0\011\uffd0\024" +
    "\uffd0\027\uffd0\033\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\001\002\000" +
    "\012\020\023\021\020\022\022\023\024\001\002\000\004" +
    "\006\uffe1\001\002\000\012\020\023\021\020\022\022\023" +
    "\024\001\002\000\006\012\221\031\uffe6\001\002\000\004" +
    "\011\223\001\002\000\004\031\uffe9\001\002\000\004\006" +
    "\224\001\002\000\012\020\023\021\020\022\022\023\024" +
    "\001\002\000\006\012\221\031\uffe6\001\002\000\004\031" +
    "\uffe7\001\002\000\004\032\uffff\001\002\000\004\011\241" +
    "\001\002\000\012\002\ufff9\004\004\025\011\032\230\001" +
    "\002\000\012\002\ufff9\004\004\025\011\032\230\001\002" +
    "\000\012\002\ufff9\004\004\025\011\032\230\001\002\000" +
    "\012\002\ufff9\004\004\025\011\032\230\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffa\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\ufffb\001\002\000\004\030\242" +
    "\001\002\000\010\011\243\031\uffdd\034\244\001\002\000" +
    "\004\006\uffda\001\002\000\004\011\263\001\002\000\004" +
    "\031\257\001\002\000\004\006\247\001\002\000\012\020" +
    "\023\021\020\022\022\023\024\001\002\000\006\012\251" +
    "\031\uffdb\001\002\000\006\011\243\034\244\001\002\000" +
    "\004\031\uffde\001\002\000\004\006\254\001\002\000\012" +
    "\020\023\021\020\022\022\023\024\001\002\000\006\012" +
    "\251\031\uffdb\001\002\000\004\031\uffdc\001\002\000\004" +
    "\006\260\001\002\000\024\004\004\011\037\024\044\033" +
    "\uffd6\035\040\036\041\040\027\041\036\046\031\001\002" +
    "\000\004\033\262\001\002\000\012\002\uffdf\004\uffdf\025" +
    "\uffdf\032\uffdf\001\002\000\004\006\uffd9\001\002\000\004" +
    "\032\ufffe\001\002\000\004\002\000\001\002\000\006\006" +
    "\270\007\271\001\002\000\044\002\ufff8\004\ufff8\011\ufff8" +
    "\024\ufff8\025\ufff8\027\ufff8\032\ufff8\033\ufff8\035\ufff8\036" +
    "\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\050\ufff8\001\002\000\012\020\023\021\020\022\022\023" +
    "\024\001\002\000\014\013\300\014\273\015\272\016\275" +
    "\017\276\001\002\000\006\010\uffeb\012\uffeb\001\002\000" +
    "\006\010\uffec\012\uffec\001\002\000\004\010\303\001\002" +
    "\000\006\010\uffef\012\uffef\001\002\000\006\010\uffee\012" +
    "\uffee\001\002\000\006\010\ufff0\012\301\001\002\000\006" +
    "\010\uffed\012\uffed\001\002\000\014\013\300\014\273\015" +
    "\272\016\275\017\276\001\002\000\004\010\ufff1\001\002" +
    "\000\006\005\305\011\160\001\002\000\044\002\ufff6\004" +
    "\ufff6\011\ufff6\024\ufff6\025\ufff6\027\ufff6\032\ufff6\033\ufff6" +
    "\035\ufff6\036\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\050\ufff6\001\002\000\044\002\ufff4\004\ufff4" +
    "\011\ufff4\024\ufff4\025\ufff4\027\ufff4\032\ufff4\033\ufff4\035" +
    "\ufff4\036\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\050\ufff4\001\002\000\004\010\307\001\002\000" +
    "\006\005\311\011\160\001\002\000\044\002\ufff7\004\ufff7" +
    "\011\ufff7\024\ufff7\025\ufff7\027\ufff7\032\ufff7\033\ufff7\035" +
    "\ufff7\036\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\050\ufff7\001\002\000\044\002\ufff5\004\ufff5\011" +
    "\ufff5\024\ufff5\025\ufff5\027\ufff5\032\ufff5\033\ufff5\035\ufff5" +
    "\036\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\050\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\012\027\005\035\007\036\004\040\006\001" +
    "\001\000\006\033\265\034\266\001\001\000\002\001\001" +
    "\000\010\027\005\035\007\040\263\001\001\000\004\023" +
    "\230\001\001\000\010\027\005\035\007\040\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\024\030\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\031\013\033\014" +
    "\032\016\041\017\042\033\027\035\034\001\001\000\006" +
    "\005\130\006\212\001\001\000\002\001\001\000\006\002" +
    "\203\015\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\031\013\033\014\032\016" +
    "\041\017\177\033\027\035\034\001\001\000\006\002\161" +
    "\015\054\001\001\000\002\001\001\000\006\005\130\006" +
    "\141\001\001\000\006\005\130\006\127\001\001\000\020" +
    "\007\031\013\033\014\032\016\041\017\124\033\027\035" +
    "\034\001\001\000\002\001\001\000\010\002\046\003\052" +
    "\015\054\001\001\000\006\002\122\015\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\116\015\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\060\015\054\001\001\000" +
    "\002\001\001\000\006\002\110\015\054\001\001\000\006" +
    "\002\107\015\054\001\001\000\006\002\106\015\054\001" +
    "\001\000\006\002\105\015\054\001\001\000\006\002\104" +
    "\015\054\001\001\000\006\002\103\015\054\001\001\000" +
    "\006\002\102\015\054\001\001\000\006\002\101\015\054" +
    "\001\001\000\006\002\100\015\054\001\001\000\006\002" +
    "\077\015\054\001\001\000\006\002\076\015\054\001\001" +
    "\000\006\002\075\015\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\046\003\112\015\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\046\003\121\015\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\130\006\132\001\001\000\004\005\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\136\015\054\001\001\000\002\001\001\000\006\005" +
    "\130\006\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\160\001\001\000\010\002" +
    "\146\004\145\015\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\146\004\153\015\054\001\001\000\002" +
    "\001\001\000\010\002\146\004\155\015\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\031\013\033\014" +
    "\032\016\041\017\163\033\027\035\034\001\001\000\006" +
    "\011\166\012\164\001\001\000\004\010\174\001\001\000" +
    "\006\002\170\015\054\001\001\000\006\011\166\012\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\031\013\033\014\032\016\041\017\172\033\027\035\034" +
    "\001\001\000\002\001\001\000\020\007\031\013\033\014" +
    "\032\016\041\017\176\033\027\035\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\031\013\033\014\032\016" +
    "\041\017\205\033\027\035\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\046\003\210\015\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\215\030\020\001\001\000" +
    "\002\001\001\000\004\030\217\001\001\000\004\025\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\224\001\001\000\004\025\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\233\027\231\035\232\037\234\001\001\000\012" +
    "\023\233\027\231\035\232\037\237\001\001\000\012\023" +
    "\233\027\231\035\232\037\236\001\001\000\012\023\233" +
    "\027\231\035\232\037\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\245\022\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\247\001\001\000\004\021\251\001\001\000" +
    "\004\020\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\254\001\001\000\004\021\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\031\013\033" +
    "\014\032\016\041\017\260\033\027\035\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\305\001\001\000\006\031\276\032\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\276\032\301\001\001\000" +
    "\002\001\001\000\006\033\265\034\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\265\034\307\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= IterProc Procedure Iter 
            {
              ProgramOp RESULT =null;
		int iterprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iterprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IterOp iterproc = (IterOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ProcNodeOp> proc = (ArrayList<ProcNodeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgramOp(iterproc, proc, iter);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IterProc ::= VarDecl IterProc 
            {
              IterOp RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DeclOp> vardecl = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         RESULT= iter.addVars(vardecl);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterProc",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IterProc ::= Function IterProc 
            {
              IterOp RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<FuncNodeOp> func = (ArrayList<FuncNodeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT= iter.addFunction(func);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterProc",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IterProc ::= 
            {
              IterOp RESULT =null;
		RESULT = new IterOp(new ArrayList<DeclOp>(), new ArrayList<FuncNodeOp>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterProc",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter ::= VarDecl Iter 
            {
              IterOp RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DeclOp> vardecl = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= iter.addVars(vardecl);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter ::= Function Iter 
            {
              IterOp RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<FuncNodeOp> func = (ArrayList<FuncNodeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= iter.addFunction(func);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter ::= Procedure Iter 
            {
              IterOp RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ProcNodeOp> proc = (ArrayList<ProcNodeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= iter.addProcedure(proc);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter ::= 
            {
              IterOp RESULT =null;
		RESULT = new IterOp(new ArrayList<DeclOp>(), new ArrayList<FuncNodeOp>(), new ArrayList<ProcNodeOp>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR Decls 
            {
              ArrayList<DeclOp> RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DeclOp> decls = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = decls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI Decls 
            {
              ArrayList<DeclOp> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DeclOp> decls = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new ArrayList<DeclOp>();
          RESULT.add(new DeclOp(ids, type));
          RESULT.addAll(decls);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              ArrayList<DeclOp> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DeclOp> decls = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new ArrayList<DeclOp>();
          RESULT.add(new DeclOp(ids, consts));
          RESULT.addAll(decls);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              ArrayList<DeclOp> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	      RESULT = new ArrayList<DeclOp>();
          RESULT.add(new DeclOp(ids, type));
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              ArrayList<DeclOp> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	      RESULT = new ArrayList<DeclOp>();
          RESULT.add(new DeclOp(ids, consts));
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID COMMA Ids 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT= new ArrayList<Identifier>();
        RESULT.add(new Identifier(id));
        RESULT.addAll(ids);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ids ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT= new ArrayList<Identifier>();
        RESULT.add(new Identifier(id));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const COMMA Consts 
            {
              ArrayList<ConstOp> RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstOp constant = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ConstOp> consts = (ArrayList<ConstOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT= new ArrayList<ConstOp>();
        RESULT.add(constant);
        RESULT.addAll(consts);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Consts ::= Const 
            {
              ArrayList<ConstOp> RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstOp constant = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT= new ArrayList<ConstOp>();
    RESULT.add(constant);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= TRUE 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp("boolean_const","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= FALSE 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp("boolean_const","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp("real_const", lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= INTEGER_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp("integer_const", lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= STRING_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp("string_const", lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              ArrayList<FuncNodeOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int funcparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int funcparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<FuncParamsOp> funcpar = (ArrayList<FuncParamsOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<TypeOp> types = (ArrayList<TypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = new ArrayList<FuncNodeOp>();
          RESULT.add(new FuncNodeOp(new Identifier(id), funcpar, types, body));
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              ArrayList<FuncParamsOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherfuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherfuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FuncParamsOp> otherfunc = (ArrayList<FuncParamsOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           RESULT = new ArrayList<FuncParamsOp>();
           RESULT.add(new FuncParamsOp(new Identifier(id), type));
           RESULT.addAll(otherfunc);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FuncParams ::= 
            {
              ArrayList<FuncParamsOp> RESULT =null;
		RESULT = new ArrayList<FuncParamsOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              ArrayList<FuncParamsOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherfuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherfuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FuncParamsOp> otherfunc = (ArrayList<FuncParamsOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArrayList<FuncParamsOp>();
                RESULT.add(new FuncParamsOp(new Identifier(id), type));
                RESULT.addAll(otherfunc);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OtherFuncParams ::= 
            {
              ArrayList<FuncParamsOp> RESULT =null;
		RESULT = new ArrayList<FuncParamsOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= REAL 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp("real");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= INTEGER 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp("integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= STRING 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= BOOLEAN 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp("boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Types ::= Type COMMA Types 
            {
              ArrayList<TypeOp> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<TypeOp> types = (ArrayList<TypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= new ArrayList<TypeOp>();
      RESULT.add(type);
      RESULT.addAll(types);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Types ::= Type 
            {
              ArrayList<TypeOp> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= new ArrayList<TypeOp>();
      RESULT.add(type);
	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              ArrayList<ProcNodeOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int procparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int procparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ProcParamsOp> procpar = (ArrayList<ProcParamsOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ArrayList<ProcNodeOp>();
        RESULT.add(new ProcNodeOp(new Identifier(id), procpar, body));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcParamsOp> RESULT =null;
		int procParamIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procParamIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier procParamId = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcParamsOp> otherproc = (ArrayList<ProcParamsOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new ArrayList<ProcParamsOp>();
          RESULT.add(new ProcParamsOp(procParamId, type));
          RESULT.addAll(otherproc);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParams ::= 
            {
              ArrayList<ProcParamsOp> RESULT =null;
		RESULT = new ArrayList<ProcParamsOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcParamsOp> RESULT =null;
		int procParamIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procParamIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier procParamId = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int otherprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otherprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcParamsOp> otherproc = (ArrayList<ProcParamsOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArrayList<ProcParamsOp>();
                RESULT.add(new ProcParamsOp(procParamId, type));
                RESULT.addAll(otherproc);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OtherProcParams ::= 
            {
              ArrayList<ProcParamsOp> RESULT =null;
		RESULT = new ArrayList<ProcParamsOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ProcParamId ::= ID 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier("id", id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ProcParamId ::= OUT ID 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identifier("out",id);
	                 RESULT.setOut(true);
	                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= VarDecl Body 
            {
              BodyOp RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DeclOp> vardecl = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = body.addVars(vardecl);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= Stat Body 
            {
              BodyOp RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatOp stat = (StatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = body.addStat(stat);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= 
            {
              BodyOp RESULT =null;
		RESULT = new BodyOp(new ArrayList<DeclOp>(), new ArrayList<StatOp>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              StatOp RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Identifier> ids = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatOp("assign", ids, exprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              StatOp RESULT =null;
		int proccallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int proccallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCallOp proccall = (ProcCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = proccall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              StatOp RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatOp("return", exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE IOArgs SEMI 
            {
              StatOp RESULT =null;
		int ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatOp("write", ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              StatOp RESULT =null;
		int ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatOp("writereturn", ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= READ IOArgs SEMI 
            {
              StatOp RESULT =null;
		int ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatOp("read", ioargs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IfStat SEMI 
            {
              StatOp RESULT =null;
		int ifstatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifstatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatOp ifstat = (IfStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ifstat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat SEMI 
            {
              StatOp RESULT =null;
		int whilestatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whilestatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOp whilestat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = whilestat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCallOp(new Identifier(id), exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FunCallOp(new Identifier(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int procexprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procexprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> procexprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcCallOp(new Identifier(id), procexprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ProcCall ::= ID LPAR RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ProcCallOp(new Identifier(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              IfStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifsbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifsbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOp> elifsbody = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsebodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsebodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp elsebody = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if (elifsbody != null && elsebody != null)
                                                                                    RESULT = new IfStatOp(expr, body, elifsbody, elsebody);
                                                                             else if(elifsbody != null && elsebody == null)
                                                                                    RESULT = new IfStatOp(expr, body, elifsbody);
                                                                             else if (elifsbody == null && elsebody != null)
                                                                                    RESULT = new IfStatOp(expr, body, elsebody);
                                                                             else
                                                                                    RESULT = new IfStatOp(expr, body);
                                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Elifs ::= Elif Elifs 
            {
              ArrayList<ElifOp> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOp elif = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOp> elifs = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= new ArrayList<ElifOp>();
      RESULT.add(elif);
      RESULT.addAll(elifs);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Elifs ::= 
            {
              ArrayList<ElifOp> RESULT =null;
		RESULT = new ArrayList<ElifOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Elif ::= ELIF Expr THEN Body 
            {
              ElifOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElifOp(expr, body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = body;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Else ::= 
            {
              BodyOp RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOp(expr,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IOArgs ::= IOConc IOArgs 
            {
              ArrayList<ExprOp> RESULT =null;
		int ioconcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ioconcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprOp> ioconc = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       RESULT = new ArrayList<ExprOp>();
       RESULT.addAll(ioconc);
       RESULT.addAll(ioargs);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ioargsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ioargsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> ioargs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       RESULT = new ArrayList<ExprOp>();
       RESULT.add(expr);
       RESULT.addAll(ioargs);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOArgs ::= 
            {
              ArrayList<ExprOp> RESULT =null;
		RESULT= new ArrayList<ExprOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IOConc ::= IOConc PLUS IOConc 
            {
              ArrayList<ExprOp> RESULT =null;
		int ioconc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ioconc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExprOp> ioconc1 = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ioconc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ioconc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> ioconc2 = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       RESULT=ioconc1;
       RESULT.addAll(ioconc2);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOConc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IOConc ::= STRING_CONST 
            {
              ArrayList<ExprOp> RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       RESULT = new ArrayList<ExprOp>();
       RESULT.add(new ConstOp("string_const", lessema));
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOConc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procexprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procexprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> procexprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         RESULT= new ArrayList<ExprOp>();
         RESULT.add(expr);
         RESULT.addAll(procexprs);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procexprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procexprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> procexprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= new ArrayList<ExprOp>();
      RESULT.add(new Identifier("ref", id));
      RESULT.addAll(procexprs);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ProcExprs ::= Expr 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= new ArrayList<ExprOp>();
      RESULT.add(expr);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ProcExprs ::= REF ID 
            {
              ArrayList<ExprOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	  RESULT = new ArrayList<ExprOp>();
      RESULT.add(new Identifier("ref", id));
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprOp> exprs = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT= new ArrayList<ExprOp>();
      RESULT.add(expr);
      RESULT.addAll(exprs);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exprs ::= Expr 
            {
              ArrayList<ExprOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       RESULT= new ArrayList<ExprOp>();
       RESULT.add(expr);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= FunCall 
            {
              ExprOp RESULT =null;
		int funcallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallOp funcall = (FunCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funcall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= REAL_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstOp("real_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= INTEGER_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstOp("integer_const", lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= STRING_CONST 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstOp("string_const", lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= ID 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Identifier(lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= TRUE 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean_const", "true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= FALSE 
            {
              ExprOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean_const", "false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr PLUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("PlusOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr MINUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("MinusOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr TIMES Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("TimesOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr DIV Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("DivOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr AND Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("AndOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr OR Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("OrOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("GTOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr GE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("GEOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("LTOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr LE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("LEOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr EQ Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("EQOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr NE Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr2 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ExprOp("NEOp", expr1, expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new UnaryOp("UminusOp",expr1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NOT Expr 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new UnaryOp("NotOp",expr1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= LPAR Expr RPAR 
            {
              ExprOp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprOp expr1 = (ExprOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=expr1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
